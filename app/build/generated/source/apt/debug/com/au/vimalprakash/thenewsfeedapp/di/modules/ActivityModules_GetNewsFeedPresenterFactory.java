// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.au.vimalprakash.thenewsfeedapp.di.modules;

import com.au.vimalprakash.thenewsfeedapp.modules.newsfeed.NewsFeedContract;
import com.au.vimalprakash.thenewsfeedapp.networking.NewsFeedApi;
import com.au.vimalprakash.thenewsfeedapp.utils.SchedulersProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ActivityModules_GetNewsFeedPresenterFactory
    implements Factory<NewsFeedContract.Presenter> {
  private final ActivityModules module;

  private final Provider<NewsFeedApi> newsFeedApiProvider;

  private final Provider<SchedulersProvider> schedulersProvider;

  public ActivityModules_GetNewsFeedPresenterFactory(
      ActivityModules module,
      Provider<NewsFeedApi> newsFeedApiProvider,
      Provider<SchedulersProvider> schedulersProvider) {
    assert module != null;
    this.module = module;
    assert newsFeedApiProvider != null;
    this.newsFeedApiProvider = newsFeedApiProvider;
    assert schedulersProvider != null;
    this.schedulersProvider = schedulersProvider;
  }

  @Override
  public NewsFeedContract.Presenter get() {
    return Preconditions.checkNotNull(
        module.getNewsFeedPresenter(newsFeedApiProvider.get(), schedulersProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<NewsFeedContract.Presenter> create(
      ActivityModules module,
      Provider<NewsFeedApi> newsFeedApiProvider,
      Provider<SchedulersProvider> schedulersProvider) {
    return new ActivityModules_GetNewsFeedPresenterFactory(
        module, newsFeedApiProvider, schedulersProvider);
  }

  /** Proxies {@link ActivityModules#getNewsFeedPresenter(NewsFeedApi, SchedulersProvider)}. */
  public static NewsFeedContract.Presenter proxyGetNewsFeedPresenter(
      ActivityModules instance, NewsFeedApi newsFeedApi, SchedulersProvider schedulersProvider) {
    return instance.getNewsFeedPresenter(newsFeedApi, schedulersProvider);
  }
}
