// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.au.vimalprakash.thenewsfeedapp.di.modules;

import com.au.vimalprakash.thenewsfeedapp.modules.mainactivity.MainAcivityContract;
import com.au.vimalprakash.thenewsfeedapp.utils.SchedulersProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ActivityModules_GetMainActivityPresenterFactory
    implements Factory<MainAcivityContract.Presenter> {
  private final ActivityModules module;

  private final Provider<SchedulersProvider> mSchedulersProvider;

  public ActivityModules_GetMainActivityPresenterFactory(
      ActivityModules module, Provider<SchedulersProvider> mSchedulersProvider) {
    assert module != null;
    this.module = module;
    assert mSchedulersProvider != null;
    this.mSchedulersProvider = mSchedulersProvider;
  }

  @Override
  public MainAcivityContract.Presenter get() {
    return Preconditions.checkNotNull(
        module.getMainActivityPresenter(mSchedulersProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<MainAcivityContract.Presenter> create(
      ActivityModules module, Provider<SchedulersProvider> mSchedulersProvider) {
    return new ActivityModules_GetMainActivityPresenterFactory(module, mSchedulersProvider);
  }

  /** Proxies {@link ActivityModules#getMainActivityPresenter(SchedulersProvider)}. */
  public static MainAcivityContract.Presenter proxyGetMainActivityPresenter(
      ActivityModules instance, SchedulersProvider mSchedulersProvider) {
    return instance.getMainActivityPresenter(mSchedulersProvider);
  }
}
